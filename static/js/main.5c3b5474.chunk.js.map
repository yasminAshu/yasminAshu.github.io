{"version":3,"sources":["component/Login.js","component/Popup.js","component/SearchResult.js","component/Search.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleUserName","e","setState","userName","target","value","handlePassword","password","login","a","fetch","method","headers","response","json","data","results","some","el","name","state","birth_year","history","push","userFound","console","error","className","type","placeholder","this","onChange","onClick","class","React","Component","Popup","planetInfo","handleClose","showHideClassName","show","Object","keys","map","key","SearchResult","maxPopulation","planets","useState","setModel","setInfo","planet","index","log","showModal","population","Search","timer","timeLeft","clearInterval","search","count","setInterval","timeLef","filterPlanets","filter","toLowerCase","includes","logout","then","resp","length","reduce","prev","current","parseInt","to","id","aria-hidden","App","exact","component","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c3b5474.chunk.js","sourcesContent":["import React from 'react';\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            userName: \"\",\r\n            password: \"\",\r\n            userFound: true,\r\n            \r\n        }\r\n    }\r\n\r\n    /**\r\n   * \r\n   *@discription - This function is to set User Name\r\n   @param {String} e - Target value of user\r\n   */\r\n\r\n    handleUserName = (e) => {\r\n        this.setState({ userName: e.target.value })\r\n    }\r\n\r\n    /**\r\n   * \r\n   *@discription - This function is to set Password of user\r\n   @param {String} e - Target value of Password\r\n   */\r\n    handlePassword = (e) => {\r\n        this.setState({ password: e.target.value })\r\n    }\r\n\r\n\r\n    /**\r\n   * \r\n   *@discription - This function is to Login user after successfull username and password\r\n   */\r\n    login = async () => {\r\n        try {\r\n            const response = await fetch(\"https://swapi.co/api/people\", {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            const data = await response.json();\r\n            const found = data.results.some(el => el.name === this.state.userName && el.birth_year === this.state.password);\r\n            if (found) {\r\n                this.props.history.push('/Search')\r\n            }else{\r\n                this.setState({ userFound: false })\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n   * \r\n   *@discription - This function is will render the jsx of Login form\r\n   */\r\n    render() {\r\n        return (\r\n            <div className=\"login-page\">\r\n                <div className=\"form\">\r\n                    <input type=\"text\" placeholder=\"username\" value={this.state.userName} onChange={this.handleUserName} />\r\n                    <input type=\"password\" placeholder=\"password\" value={this.state.password} onChange={this.handlePassword} />\r\n                    <button onClick={this.login} >login</button>\r\n                </div>\r\n                {!this.state.userFound && <div class=\"error\">User id or password is incorrect</div>\r\n}            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react';\r\n   /**\r\n   * \r\n   *@discription - This function will return the jsx of model popup\r\n   @param planetInfo -Object of planet selected\r\n    @param handleClose -function to close popup\r\n     @param show -variable to show and hide popup\r\n     @return {String} - returns the jsx code of the popup\r\n   */\r\nexport const Popup = ({ planetInfo, handleClose, show }) => {\r\n    let showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\r\n    return (\r\n        <div className={showHideClassName}>\r\n            <section className=\"modal-main\">\r\n                <h2>Planet</h2>\r\n                <div className=\"planet-info\">\r\n                    {planetInfo && Object.keys(planetInfo).map(function (key) {\r\n                        return (\r\n                            <>\r\n                                <span><strong>{key}</strong></span>\r\n                                <span >{planetInfo && planetInfo[key]}</span>\r\n                            </>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <button className=\"button-close\" onClick={handleClose}>close</button>\r\n            </section>\r\n        </div>\r\n    );\r\n};","import React, { useState } from 'react';\r\nimport { Popup } from './Popup'\r\nexport const SearchResult = ({ maxPopulation, planets }) => {\r\n\r\n    const [show, setModel] = useState(false);\r\n    const [planetInfo, setInfo] = useState(null);\r\n\r\n    /**\r\n    * \r\n    *@discription - This function will show model on cliking the row of the table\r\n    @param planet -Object of planet selected\r\n    */\r\n    function showModal(planet) {\r\n        setModel(true)\r\n        setInfo(planet)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Popup show={show} planetInfo={planetInfo} handleClose={() => setModel(false)} />\r\n\r\n            <div className=\"grid\">\r\n                {planets && <div className=\"header\">\r\n                    <span className=\"search-head\"><strong>Name</strong></span>\r\n                    <span className=\"search-head\"><strong>Population</strong></span>\r\n                </div>}\r\n                {planets && planets.map((planet, index) => {\r\n                    console.log(planet)\r\n                    return (\r\n                        <div key = {index} className={`grid-container ${maxPopulation.name === planet.name ? \"active\" : \"\"}`} onClick={() => showModal(planet)}>\r\n                            <span >{planet.name}</span>\r\n                            <span>{planet.population}</span>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { SearchResult } from './SearchResult'\r\nimport { Redirect } from 'react-router-dom';\r\nclass Search extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            planets: [],\r\n            filterPlanets: [],\r\n            logout: false,\r\n            count:0,\r\n            timeLeft:5\r\n        }\r\n    }\r\n\r\n    /**\r\n   * \r\n   *@discription - This function is will fetch the value of all the planet\r\n   */\r\n    componentDidMount() {\r\n        try {\r\n            fetch(\"https://swapi.co/api/planets\", {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }).then((resp) => resp.json())\r\n                .then((data) => {\r\n                    this.setState({ planets: data.results })\r\n                });\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    }\r\n\r\n   timer = ()=> {\r\n    this.setState({timeLeft:this.state.timeLeft-1})\r\n    console.log(\"timer\",this.state.timeLeft)\r\n    if(this.state.timeLeft == 0){\r\n        clearInterval(this.timer)   \r\n    }\r\n \r\n   }\r\n    /**\r\n   * \r\n   *@discription - This function is will fetch the value of all the planet\r\n   @param e- Target value of the search box\r\n   */\r\n    search = (e) => {\r\n      \r\n        let search = e.target.value;\r\n        const { planets,count} = this.state;\r\n       \r\n        console.log(\"count\",count)\r\n        if(count === 0){\r\n          this.timer = setInterval(this.timer,1000);\r\n        }\r\n    \r\n        if (search !== \"\" && count < 14 && this.state.timeLef>0) {\r\n            let filterPlanets = planets.filter((planet) => {\r\n                return planet.name.toLowerCase().includes(search.toLowerCase())\r\n            })\r\n            this.setState({ filterPlanets: filterPlanets })\r\n        } else {\r\n            this.setState({ filterPlanets: [] })\r\n        }\r\n\r\n        this.setState({count:count+1})\r\n\r\n    }\r\n\r\n   /**\r\n   * \r\n   *@discription - This function will logout user\r\n   */\r\n    logout = () => {\r\n        this.setState({ logout: true })\r\n    }\r\n\r\n   /**\r\n   * \r\n   *@discription - This function will render the jsx of search form\r\n   */\r\n    render() {\r\n        const maxPopulation = this.state.filterPlanets.length !== 0 && this.state.filterPlanets.reduce(function (prev, current) {\r\n            console.log(typeof prev.population, current.population)\r\n            return (parseInt(prev.population) > parseInt(current.population)) ? prev : current\r\n        })\r\n        if (this.state.logout) {\r\n            return <Redirect to='/' />;\r\n        }\r\n        return (\r\n            <div className=\"main-container\">\r\n                <button onClick={this.logout} className=\"logout\">Logout</button>\r\n                <div className=\"search-container\">\r\n                    <input type=\"text\" id=\"search-bar\" placeholder=\"Search Planet....\" onChange={this.search} />\r\n                    <i className=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                {this.state.filterPlanets.length !== 0 && <SearchResult maxPopulation={maxPopulation} planets={this.state.filterPlanets} />}\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Search","import React from 'react';\nimport Login from '../src/component/Login'\nimport './App.css';\nimport Search from '../src/component/Search'\nimport '../src/css/style.css'\nimport {\n  HashRouter as Router,\n  Route\n} from \"react-router-dom\";\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact component={Login} path='/' />\n          <Route component={Search} path='/Search' />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}